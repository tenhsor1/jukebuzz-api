'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _bcrypt = require('bcrypt');

var _bcrypt2 = _interopRequireDefault(_bcrypt);

var _BaseHash2 = require('./BaseHash');

var _BaseHash3 = _interopRequireDefault(_BaseHash2);

/**
 * Default salt length
 * @type {Number}
 * @private
 */
var DEFAULT_SALT_LENGTH = 10;

/**
 * Default cost of processing the data
 * @type {Number}
 * @private
 */
var DEFAULT_ROUNDS = 10;

var BCryptHash = (function (_BaseHash) {
  _inherits(BCryptHash, _BaseHash);

  function BCryptHash() {
    _classCallCheck(this, BCryptHash);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _get(Object.getPrototypeOf(BCryptHash.prototype), 'constructor', this).apply(this, args);
  }

  /**
   * Get salt
   * @returns {String}
   */

  _createClass(BCryptHash, [{
    key: 'getSalt',
    value: function getSalt() {
      return this.get('salt');
    }

    /**
     * Set new salt for bcrypt
     * @param {String} _salt New salt
     * @returns {BCryptHash}
     */
  }, {
    key: 'setSalt',
    value: function setSalt(_salt) {
      this.set('salt', _salt);
      return this;
    }

    /**
     * Get current salt length
     * @returns {Number}
     */
  }, {
    key: 'getSaltLength',
    value: function getSaltLength() {
      return this.get('saltLength') || DEFAULT_SALT_LENGTH;
    }

    /**
     * Set new salt length
     * @param {Number} _length Length of salt
     * @returns {BCryptHash}
     */
  }, {
    key: 'setSaltLength',
    value: function setSaltLength(_length) {
      this.set('saltLength', _length);
      return this;
    }

    /**
     * Get current rounds for generating salt
     * @returns {Number}
     */
  }, {
    key: 'getRounds',
    value: function getRounds() {
      return this.get('rounds') || DEFAULT_ROUNDS;
    }

    /**
     * Set rounds for generating salt
     * @param {Number} _rounds
     * @returns {BCryptHash}
     */
  }, {
    key: 'setRounds',
    value: function setRounds(_rounds) {
      this.set('rounds', _rounds);
      return this;
    }

    /**
     * Generate new bcrypt salt
     * @param {Number} [_rounds]
     * @returns {Promise}
     */
  }, {
    key: 'generateSalt',
    value: function generateSalt(_rounds) {
      var _this = this;

      return new Promise(function (resolve, reject) {
        _bcrypt2['default'].genSalt(_rounds || _this.getRounds(), function (error, salt) {
          return error ? reject(error) : resolve(salt);
        });
      });
    }

    /**
     * Generates new bcrypt salt in sync mode
     * @param {Number} [_rounds]
     * @returns {String}
     */
  }, {
    key: 'generateSaltSync',
    value: function generateSaltSync(_rounds) {
      return _bcrypt2['default'].genSaltSync(_rounds || this.getRounds());
    }

    /**
     * Hash data
     * @param {String} _data Data to hash with bcrypt
     * @param {Object} [_config] Additional configuration where you can override pre-defined config
     * @returns {Promise}
     */
  }, {
    key: 'hash',
    value: function hash(_data, _config) {
      var config = _lodash2['default'].merge({}, this.get(), {
        salt: this.getSalt(),
        saltLength: this.getSaltLength()
      }, _config);

      return new Promise(function (resolve, reject) {
        _bcrypt2['default'].hash(_data, config.salt || config.saltLength, function (error, hash) {
          return error ? reject(error) : resolve(hash);
        });
      });
    }

    /**
     * Hash data in sync mode
     * @param {String} _data Data to hash with bcrypt
     * @param {Object} [_config] Additional configuration where you can override pre-defined config
     * @returns {String} Returns hashed data
     */
  }, {
    key: 'hashSync',
    value: function hashSync(_data, _config) {
      var config = _lodash2['default'].merge({}, this.get(), {
        salt: this.getSalt(),
        saltLength: this.getSaltLength()
      }, _config);

      return _bcrypt2['default'].hashSync(_data, config.salt || config.saltLength);
    }

    /**
     * Compare hash with plain data
     * @param {String} _plainData Plain data
     * @param {String} _hash Hash to compare with
     * @returns {Promise}
     */
  }, {
    key: 'compare',
    value: function compare(_plainData, _hash) {
      return new Promise(function (resolve, reject) {
        _bcrypt2['default'].compare(_plainData, _hash, function (error, equal) {
          return error ? reject(error) : resolve(equal);
        });
      });
    }

    /**
     * Compare data with hash in sync mode
     * @param {String} _plainData Plain data
     * @param {String} _hash Hash to compare with
     * @returns {Boolean} Returns true if equal
     */
  }, {
    key: 'compareSync',
    value: function compareSync(_plainData, _hash) {
      return _bcrypt2['default'].compareSync(_plainData, _hash);
    }
  }]);

  return BCryptHash;
})(_BaseHash3['default']);

exports['default'] = BCryptHash;
;
module.exports = exports['default'];