'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _jsonwebtoken = require('jsonwebtoken');

var _jsonwebtoken2 = _interopRequireDefault(_jsonwebtoken);

var _BaseCipher2 = require('./BaseCipher');

var _BaseCipher3 = _interopRequireDefault(_BaseCipher2);

/**
 * Secret key for symmetric encoding
 * @type {String}
 * @private
 */
var SECRET_KEY = 'DEFAULT_SECRET_KEY';

/**
 * Algorithm that using for signing JWT
 * @type {String}
 * @private
 */
var ALGORITHM = 'HS512';

/**
 * Time interval when token will be expired or false if not expires
 * @type {String|Number}
 * @private
 */
var EXPIRES_IN = '24h';

var JwtCipher = (function (_BaseCipher) {
  _inherits(JwtCipher, _BaseCipher);

  function JwtCipher() {
    _classCallCheck(this, JwtCipher);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _get(Object.getPrototypeOf(JwtCipher.prototype), 'constructor', this).apply(this, args);
  }

  /**
   * Get current secret key
   * @returns {String}
   */

  _createClass(JwtCipher, [{
    key: 'getSecretKey',
    value: function getSecretKey() {
      return this.get('secretKey') || SECRET_KEY;
    }

    /**
     * Set new secret key
     * @param {String} _secret
     * @returns {JwtCipher}
     */
  }, {
    key: 'setSecretKey',
    value: function setSecretKey(_secret) {
      this.set('secretKey', _secret);
      return this;
    }

    /**
     * Get current algorithm
     * @returns {String}
     */
  }, {
    key: 'getAlgorithm',
    value: function getAlgorithm() {
      return this.get('algorithm') || ALGORITHM;
    }

    /**
     * Set new algorithm
     * @param {String} _algorithm
     * @returns {JwtCipher}
     */
  }, {
    key: 'setAlgorithm',
    value: function setAlgorithm(_algorithm) {
      this.set('algorithm', _algorithm);
      return this;
    }

    /**
     * Get expires interval
     * @returns {String|Number}
     */
  }, {
    key: 'getExpiresIn',
    value: function getExpiresIn() {
      var expiresIn = this.get('expiresIn');
      return expiresIn === false ? expiresIn : expiresIn || EXPIRES_IN;
    }

    /**
     * Set expires interval
     * @param {String|Number} _time
     * @returns {JwtCipher}
     */
  }, {
    key: 'setExpiresIn',
    value: function setExpiresIn(_time) {
      this.set('expiresIn', _time);
      return this;
    }

    /**
     * Encode cipher
     * @param {Object} _data Data to encode
     * @param {Object} [_config] Additional options for jwt.sign
     * @returns {Promise.resolve}
     */
  }, {
    key: 'encode',
    value: function encode(_data, _config) {
      var config = _lodash2['default'].merge({}, this.get(), {
        algorithm: this.getAlgorithm(),
        expiresIn: this.getExpiresIn(),
        secretKey: this.getSecretKey()
      }, _config);

      return new Promise(function (resolve, reject) {
        _jsonwebtoken2['default'].sign(_data, config.secretKey, config, function (encoded) {
          return resolve(encoded);
        });
      });
    }

    /**
     * Encode data to JSON Web Token
     * @param {Object} _data Data that need to encode
     * @param {Object} [_config] Specify options for jwt.sign
     * @returns {String} Returns JSON Web Token in string format
     */
  }, {
    key: 'encodeSync',
    value: function encodeSync(_data, _config) {
      var config = _lodash2['default'].merge({}, this.get(), {
        algorithm: this.getAlgorithm(),
        expiresIn: this.getExpiresIn(),
        secretKey: this.getSecretKey()
      }, _config);

      return _jsonwebtoken2['default'].sign(_data, config.secretKey, config);
    }

    /**
     * Decode token in async mode
     * @param {Object} _data Data to decode
     * @param {Object} [_config] Options for jwt.verify
     * @returns {Object}
     */
  }, {
    key: 'decode',
    value: function decode(_data, _config) {
      var config = _lodash2['default'].merge({}, this.get(), {
        secretKey: this.getSecretKey()
      }, _config);

      return new Promise(function (resolve, reject) {
        _jsonwebtoken2['default'].verify(_data, config.secretKey, config, function (error, decoded) {
          return error ? reject(error) : resolve(decoded);
        });
      });
    }

    /**
     * Decode token in sync mode
     * @param {Object} _data Data to decode
     * @param {Object} [_config] Advanced options for jwt.verify
     * @returns {*}
     */
  }, {
    key: 'decodeSync',
    value: function decodeSync(_data, _config) {
      var config = _lodash2['default'].merge({}, this.get(), {
        secretKey: this.getSecretKey()
      }, _config);

      return _jsonwebtoken2['default'].verify(_data, config.secretKey, config);
    }
  }]);

  return JwtCipher;
})(_BaseCipher3['default']);

exports['default'] = JwtCipher;
module.exports = exports['default'];