'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _awsSdk = require('aws-sdk');

var _awsSdk2 = _interopRequireDefault(_awsSdk);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _BaseStorage2 = require('./BaseStorage');

var _BaseStorage3 = _interopRequireDefault(_BaseStorage2);

var AmazonStorage = (function (_BaseStorage) {
  _inherits(AmazonStorage, _BaseStorage);

  function AmazonStorage() {
    _classCallCheck(this, AmazonStorage);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _get(Object.getPrototypeOf(AmazonStorage.prototype), 'constructor', this).apply(this, args);

    this.setProvider(new _awsSdk2['default'].S3(this.get('provider')));
  }

  /**
   * Parse source and try to make it Buffer
   * @param {String|Buffer} source Source file
   * @returns {Buffer}
   * @private
   */

  _createClass(AmazonStorage, [{
    key: 'parseSourceFile',
    value: function parseSourceFile(source) {
      var buffer = undefined;

      if (typeof source === 'string') {
        buffer = _fs2['default'].readFileSync(source);
      } else if (Buffer.isBuffer(source)) {
        buffer = source;
      } else {
        throw new Error('You can pass only String|Buffer');
      }

      return buffer;
    }

    /**
     * Parse destination string and get Bucket and Key
     * @param {String} destination Destination string
     * @returns {{bucket: String, key: String}}
     * @private
     */
  }, {
    key: 'parseBucketAndKey',
    value: function parseBucketAndKey(destination) {
      var isBucketDefined = destination.indexOf(':') !== -1;
      var bucket = isBucketDefined ? destination.split(':')[0] : this.get('bucket');
      var key = isBucketDefined ? destination.split(':')[1] : destination;

      return {
        bucket: bucket,
        key: key
      };
    }

    /**
     * Upload file to Amazon Storage Service
     * @param {String|Buffer} _source Source file
     * @param {String} _destination Destination path for file
     * @param {Object} [_config] Additional configuration object for putObject
     * @returns {Promise}
     */
  }, {
    key: 'upload',
    value: function upload(_source, _destination, _config) {
      var _this = this;

      var source = this.parseSourceFile(_source);
      var destination = this.parseBucketAndKey(_destination);
      var config = _lodash2['default'].merge({
        Bucket: destination.bucket,
        Key: destination.key,
        Body: source
      }, _config);

      return new Promise(function (resolve, reject) {
        _this.getProvider().putObject(config, function (error, result) {
          return error ? reject(error) : resolve(result);
        });
      });
    }

    /**
     * Download file from Amazon Storage Service
     * @param {String} _source Source file that need to download
     * @param {Object} [_config] Additional configuration for getObject
     * @returns {Promise}
     */
  }, {
    key: 'download',
    value: function download(_source, _config) {
      var _this2 = this;

      var source = this.parseBucketAndKey(_source);
      var config = _lodash2['default'].merge({
        Bucket: source.bucket,
        Key: source.key
      }, _config);

      return new Promise(function (resolve, reject) {
        _this2.getProvider().getObject(config, function (error, result) {
          return error ? reject(error) : resolve(result);
        });
      });
    }

    /**
     * Remove file from Amazon Storage Service
     * @param {String} _source Source file that need to remove
     * @param {Object} [_config] Additional configuration object for deleteObject
     * @returns {Promise}
     */
  }, {
    key: 'remove',
    value: function remove(_source, _config) {
      var _this3 = this;

      var source = this.parseBucketAndKey(_source);
      var config = _lodash2['default'].merge({
        Bucket: source.bucket,
        Key: source.key
      }, _config);

      return new Promise(function (resolve, reject) {
        _this3.getProvider().deleteObject(config, function (error, result) {
          return error ? reject(error) : resolve(result);
        });
      });
    }
  }]);

  return AmazonStorage;
})(_BaseStorage3['default']);

exports['default'] = AmazonStorage;
module.exports = exports['default'];