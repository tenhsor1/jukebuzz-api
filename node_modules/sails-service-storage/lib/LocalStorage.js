'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _mkdirp = require('mkdirp');

var _mkdirp2 = _interopRequireDefault(_mkdirp);

var _BaseStorage2 = require('./BaseStorage');

var _BaseStorage3 = _interopRequireDefault(_BaseStorage2);

var LocalStorage = (function (_BaseStorage) {
  _inherits(LocalStorage, _BaseStorage);

  function LocalStorage() {
    _classCallCheck(this, LocalStorage);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _get(Object.getPrototypeOf(LocalStorage.prototype), 'constructor', this).apply(this, args);

    this.setProvider(_fs2['default']);
    this.createUploadsFolder(this.get('provider.uploads'));
  }

  /**
   * Recursively create uploads folder
   * @param {String} path
   * @returns {LocalStorage}
   * @private
   */

  _createClass(LocalStorage, [{
    key: 'createUploadsFolder',
    value: function createUploadsFolder(path) {
      _mkdirp2['default'].sync(path);
      return this;
    }

    /**
     * Parse input file and try to make it Buffer
     * @param {String|Buffer} source Source file
     * @returns {Buffer}
     * @private
     */
  }, {
    key: 'parseSourceFile',
    value: function parseSourceFile(source) {
      var buffer = undefined;

      if (typeof source === 'string') {
        buffer = _fs2['default'].readFileSync(source);
      } else if (Buffer.isBuffer(source)) {
        buffer = source;
      } else {
        throw new Error('You must pass String|Buffer');
      }

      return buffer;
    }

    /**
     * Upload file to destination
     * @param {String|Buffer} _source Source file
     * @param {String} _destination Destination
     * @param {Object} [_config] Additional configuration
     * @returns {Promise}
     */
  }, {
    key: 'upload',
    value: function upload(_source, _destination, _config) {
      var _this = this;

      var source = this.parseSourceFile(_source);
      var destination = _path2['default'].resolve(this.get('provider.uploads'), _destination);

      return new Promise(function (resolve, reject) {
        _this.getProvider().writeFile(destination, source, function (error) {
          return error ? reject(error) : resolve();
        });
      });
    }

    /**
     * Get uploaded file
     * @param {String} _source Source file to get
     * @param {Object} [_config] Additional configuration
     * @returns {Promise}
     */
  }, {
    key: 'download',
    value: function download(_source, _config) {
      var _this2 = this;

      var source = _path2['default'].resolve(this.get('provider.uploads'), _source);

      return new Promise(function (resolve, reject) {
        _this2.getProvider().readFile(source, function (error, data) {
          return error ? reject(error) : resolve(data);
        });
      });
    }

    /**
     * Remove file from storage
     * @param {String} _source Source file to remove
     * @param {Object} [_config]
     * @returns {Promise}
     */
  }, {
    key: 'remove',
    value: function remove(_source, _config) {
      var _this3 = this;

      var source = _path2['default'].resolve(this.get('provider.uploads'), _source);

      return new Promise(function (resolve, reject) {
        _this3.getProvider().unlink(source, function (error) {
          return error ? reject(error) : resolve();
        });
      });
    }
  }]);

  return LocalStorage;
})(_BaseStorage3['default']);

exports['default'] = LocalStorage;
module.exports = exports['default'];