'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _stripe = require('stripe');

var _stripe2 = _interopRequireDefault(_stripe);

var _BasePayment2 = require('./BasePayment');

var _BasePayment3 = _interopRequireDefault(_BasePayment2);

var StripePayment = (function (_BasePayment) {
  _inherits(StripePayment, _BasePayment);

  function StripePayment() {
    _classCallCheck(this, StripePayment);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _get(Object.getPrototypeOf(StripePayment.prototype), 'constructor', this).apply(this, args);

    this.setProvider((0, _stripe2['default'])(this.get('apiKey')));
  }

  /**
   * Checkout credit card
   * @param {Object} _creditCard Credit card data
   * @param {Object} [_config] Additional configuration for provider
   * @returns {Promise}
   * @example
   * stripePayment.checkout({
   *  amount: '10.00',
   *  cardNumber: '4242424242424242',
   *  cardHolderName: 'Eugene Obrezkov',
   *  expMonth: '01',
   *  expYear: '2018',
   *  cvv: '123'
   * });
   */

  _createClass(StripePayment, [{
    key: 'checkout',
    value: function checkout(_creditCard, _config) {
      var _this = this;

      var config = _lodash2['default'].merge({
        amount: _creditCard.amount,
        currency: 'usd',
        capture: true,
        source: {
          object: 'card',
          number: _creditCard.cardNumber,
          exp_month: _creditCard.expMonth,
          exp_year: _creditCard.expYear,
          cvc: _creditCard.cvv,
          name: _creditCard.cardHolderName
        }
      }, _config);

      return new Promise(function (resolve, reject) {
        _this.getProvider().charges.create(config, function (error, result) {
          return error ? reject(error) : resolve(result);
        });
      });
    }

    /**
     * Retrieve information about transaction
     * @param {String} _transactionId
     * @returns {Promise}
     */
  }, {
    key: 'retrieve',
    value: function retrieve(_transactionId) {
      var _this2 = this;

      return new Promise(function (resolve, reject) {
        _this2.getProvider().charges.retrieve(_transactionId, function (error, charge) {
          return error ? reject(error) : resolve(charge);
        });
      });
    }

    /**
     * Refunds already settled payment
     * @param {String} _transactionId Transaction ID
     * @returns {Promise}
     */
  }, {
    key: 'refund',
    value: function refund(_transactionId) {
      var _this3 = this;

      return new Promise(function (resolve, reject) {
        _this3.getProvider().refunds.create({ charge: _transactionId }, function (error, refund) {
          return error ? reject(error) : resolve(refund);
        });
      });
    }
  }]);

  return StripePayment;
})(_BasePayment3['default']);

exports['default'] = StripePayment;
module.exports = exports['default'];